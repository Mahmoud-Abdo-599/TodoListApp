{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/AddTodo.js","components/pages/About.js","components/layout/CurrentDate.js","components/layout/Date.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","border","borderRadius","cursor","float","Todos","todos","map","key","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","About","Fragment","dateStyle","CurrentDate","tempDate","Date","currDate","getDate","getMonth","getFullYear","App","uuid","filter","newTodo","complete","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0ae6eea.chunk.js","sourcesContent":["import React from 'react' ;\r\nimport {Link} from 'react-router-dom' ;\r\n\r\nfunction Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n            <Link style={linkStyle} to=\"/TodoListApp\">Home</Link> | \r\n            <Link style={linkStyle} to=\"/About\"> About</Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background:'#333' ,\r\n    color:'#fff' ,\r\n    textAlign:'center' ,\r\n    padding:'10px'\r\n\r\n}\r\n\r\nconst linkStyle = {\r\n    color:'#fff' ,\r\n    textDecoration: 'none'\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ?\r\n                'Line-through' : 'none'\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {id , title} = this.props.todo ;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this,id)} /> {'  '}\r\n                    {title}\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//PropTypes\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired ,\r\n    markComplete: PropTypes.func.isRequired ,\r\n    delTodo: PropTypes.func.isRequired ,\r\n}\r\n\r\nconst btnStyle = {\r\n    background : '#ff0000' ,\r\n    color : '#fff' ,\r\n    border : 'none' ,\r\n    padding : '5px 9px' ,\r\n    borderRadius : '50%' ,\r\n    cursor : 'pointer' ,\r\n    float : 'right'\r\n\r\n}\r\n\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types'; \r\n\r\nexport class Todos extends Component {\r\n\r\n    render() {\r\n        return this.props.todos.map((todo) => (\r\n        <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete}\r\n        delTodo={this.props.delTodo} />\r\n        ));\r\n    }\r\n}\r\n\r\n//PropTypes\r\nTodos.propTypes = {\r\n    todos: PropTypes.array.isRequired ,\r\n    markComplete: PropTypes.func.isRequired ,\r\n    delTodo: PropTypes.func.isRequired ,\r\n\r\n}\r\n\r\nexport default Todos\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport class AddTodo extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onChange = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\r\n                <input type=\"text\"\r\n                    name=\"title\"\r\n                    style={{ flex: '10', padding: '5px' }}\r\n                    placeholder=\"Add Todo ...\"\r\n                    value={this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input\r\n                    type=\"submit\"\r\n                    value=\"submit\"\r\n                    className=\"btn\"\r\n                    style={{ flex: '1' }}\r\n                />\r\n            </form>\r\n        )\r\n    }\r\n}\r\n//PropTypes\r\nAddTodo.propTypes = {\r\n    addTodo: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nfunction About() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is TodoList App v1.1.0 <br></br> Mahmoud Abdo\r\n            <br></br>Mahmoud.abdo59986@Gmail.com </p>\r\n            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About ;\r\n","import React from 'react'\r\n\r\nfunction CurrentDate() {\r\n    var tempDate = new Date();\r\n    var date =tempDate.getDate()+  '-' + (tempDate.getMonth()+1) \r\n    + '-' + tempDate.getFullYear() ;\r\n    const currDate = \"Current Date: \"+date;\r\n    return (\r\n      <header style={dateStyle}>\r\n          <h5>{currDate}</h5>\r\n          </header>\r\n    );\r\n  }\r\n\r\n  const dateStyle = {\r\n    textAlign:'center' ,\r\n    padding:'3px',\r\n    textDecoration: 'none'\r\n  }\r\n\r\nexport default CurrentDate\r\n","import React from 'react';\r\nimport CurrentDate from './CurrentDate';\r\n\r\n\r\nfunction Date() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <form>\r\n                {/* <button\r\n                    className=\"btn\"\r\n                    style={{ flex: '1' }}\r\n                >Prev Day</button> */}\r\n                <CurrentDate />\r\n                {/* <button\r\n                    className=\"btn\"\r\n                    style={{ flex: '1' }}\r\n                >Next Day</button> */}\r\n            </form>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '0px'\r\n\r\n}\r\n\r\n\r\nexport default Date;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Header from './components/layout/Header';\nimport './App.css';\nimport Todos from './components/Todos';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport Date from './components/layout/Date' ;\nimport uuid from 'react-uuid';\n\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        title: 'Take out the trash',\n        completed: false\n      },\n      {\n        id: uuid(),\n        title: 'Dinner with wife',\n        completed: false\n      }, {\n        id: uuid(),\n        title: 'Meeting with boss',\n        completed: false\n      }\n    ]\n\n  }\n\n  // mark complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n        return todo;\n      })\n    });\n  }\n\n  // delete todo\n  delTodo = (id) => {\n    this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })\n  }\n\n  // Add todo\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title,\n      complete: false\n    }\n    this.setState({ todos: [...this.state.todos, newTodo] })\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/TodoListApp\" render={props => (\n              <React.Fragment>\n                <AddTodo addTodo={this.addTodo} />\n                <Date />\n                <Todos todos={this.state.todos} markComplete={this.markComplete}\n                  delTodo={this.delTodo} />\n              </React.Fragment>\n            )} />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}